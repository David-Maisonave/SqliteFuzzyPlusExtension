select Name
, IsSimilar(Name, 'David Jorge', 0) as a0 -- UseDefaultStringMatchingAlgorithm (ID# 0)
, IsSimilar(Name, 'David Jorge', 1) as a1 -- Levenshtein (ID# 1)
, IsSimilar(Name, 'David Jorge', 2) as a2 -- DamerauLevenshtein (ID# 2)
, IsSimilar(Name, 'David Jorge', 3) as a3 -- JaroWinkler (ID# 3)
, IsSimilar(Name, 'David Jorge', 4) as a4 -- HammingDistance (ID# 4)
, IsSimilar(Name, 'David Jorge', 5) as a5 -- JaroDistance (ID# 5)
, IsSimilar(Name, 'David Jorge', 6) as a6 -- NormalizedLevenshteinDistance (ID# 6)
, IsSimilar(Name, 'David Jorge', 7) as a7 -- Levenshtein2Distance (ID# 7)
, IsSimilar(Name, 'David Jorge', 8) as a8 -- ChapmanLengthDeviation (ID# 8)
, IsSimilar(Name, 'David Jorge', 9) as a9 -- EuclideanDistance (ID# 9)
, IsSimilar(Name, 'David Jorge', 32) as a32 -- LongestCommonSequence (ID# 32)
, IsSimilar(Name, 'David Jorge', 33) as a33 -- NeedlemanWunsch (ID# 33)
, IsSimilar(Name, 'David Jorge', 34) as a34 -- RatcliffObershelpSimilarityDistance (ID# 34)
, IsSimilar(Name, 'David Jorge', 35) as a35 -- LongestCommonSubstringDistance (ID# 35)
, IsSimilar(Name, 'David Jorge', 36) as a36 -- LongestCommonSubsequenceDistance (ID# 36)
, IsSimilar(Name, 'David Jorge', 37) as a37 -- SmithWaterman (ID# 37)
, IsSimilar(Name, 'David Jorge', 38) as a38 -- SmithWatermanGotoh (ID# 38)
, IsSimilar(Name, 'David Jorge', 39) as a39 -- SmithWatermanGotohWindowedAffine (ID# 39)
, IsSimilar(Name, 'David Jorge', 64) as a64 -- CosineSimilarity (ID# 64)
, IsSimilar(Name, 'David Jorge', 65) as a65 -- JaccardSimilarity (ID# 65)
, IsSimilar(Name, 'David Jorge', 66) as a66 -- JaccardIndex (ID# 66)
, IsSimilar(Name, 'David Jorge', 67) as a67 -- TanimotoCoefficientDistance (ID# 67)
, IsSimilar(Name, 'David Jorge', 68) as a68 -- OverlapCoefficient (ID# 68)
, IsSimilar(Name, 'David Jorge', 69) as a69 -- SorensenDiceDistance (ID# 69)
, IsSimilar(Name, 'David Jorge', 70) as a70 -- DiceSimilarity (ID# 70)
, IsSimilar(Name, 'David Jorge', 71) as a71 -- BlockDistance (ID# 71)
, IsSimilar(Name, 'David Jorge', 72) as a72 -- MatchingCoefficient (ID# 72)
, IsSimilar(Name, 'David Jorge', 73) as a73 -- QGramsDistance (ID# 73)
, IsSimilar(Name, 'David Jorge', 74) as a74 -- NGramsDistance (ID# 74)
, IsSimilar(Name, 'David Jorge', 75) as a75 -- TverskyIndex_DO_NOT_USE (ID# 75)
, IsSimilar(Name, 'David Jorge', 76) as a76 -- MongeElkan (ID# 76)
, IsSimilar(Name, 'David Jorge', 77) as a77 -- Sift4 (ID# 77)
, IsSimilar(Name, 'David Jorge', 78) as a78 -- GeneralizedCompressionDistance_DO_NOT_USE (ID# 78)
, IsSimilar(Name, 'David Jorge', 79) as a79 -- SimHash_DO_NOT_USE (ID# 79)
, IsSimilar(Name, 'David Jorge', 80) as a80 -- MinHash_DO_NOT_USE (ID# 80)
, IsSimilar(Name, 'David Jorge', 96) as a96 -- PhraseTokenize (ID# 96)
, IsSimilar(Name, 'David Jorge', 97) as a97 -- SimplePhraseTokenize (ID# 97)
, IsSimilar(Name, 'David Jorge', 128) as a128 -- Fuzzy_Damlev (ID# 128)
, IsSimilar(Name, 'David Jorge', 129) as a129 -- Fuzzy_Hamming (ID# 129)
, IsSimilar(Name, 'David Jorge', 130) as a130 -- Fuzzy_Jarowin (ID# 130)
, IsSimilar(Name, 'David Jorge', 131) as a131 -- Fuzzy_Leven (ID# 131)
, IsSimilar(Name, 'David Jorge', 132) as a132 -- Fuzzy_Osadist (ID# 132)
, IsSimilar(Name, 'David Jorge', 133) as a133 -- Fuzzy_Editdist (ID# 133)
, IsSimilar(Name, 'David Jorge', 134) as a134 -- Fuzzy_Jaro (ID# 134)
, IsSimilar(Name, 'David Jorge', 135) as a135 -- EdlibDistance (ID# 135)
, IsSimilar(Name, 'David Jorge', 224) as a224 -- ChapmanMeanLength (ID# 224)
, IsSimilar(Name, 'David Jorge', 234) as a234 -- EditDistance (ID# 234)
, IsSimilar(Name, 'David Jorge', 255) as a255 -- ExactMatch (ID# 255)
, IsSimilar(Name, 'David Jorge', 257) as a257 -- iLevenshtein (ID# 257)
, IsSimilar(Name, 'David Jorge', 258) as a258 -- iDamerauLevenshtein (ID# 258)
, IsSimilar(Name, 'David Jorge', 259) as a259 -- iJaroWinkler (ID# 259)
, IsSimilar(Name, 'David Jorge', 260) as a260 -- iHammingDistance (ID# 260)
, IsSimilar(Name, 'David Jorge', 261) as a261 -- iJaroDistance (ID# 261)
, IsSimilar(Name, 'David Jorge', 262) as a262 -- iNormalizedLevenshteinDistance (ID# 262)
, IsSimilar(Name, 'David Jorge', 263) as a263 -- iLevenshtein2Distance (ID# 263)
, IsSimilar(Name, 'David Jorge', 264) as a264 -- iChapmanLengthDeviation (ID# 264)
, IsSimilar(Name, 'David Jorge', 265) as a265 -- iEuclideanDistance (ID# 265)
, IsSimilar(Name, 'David Jorge', 288) as a288 -- iLongestCommonSequence (ID# 288)
, IsSimilar(Name, 'David Jorge', 289) as a289 -- iNeedlemanWunsch (ID# 289)
, IsSimilar(Name, 'David Jorge', 290) as a290 -- iRatcliffObershelpSimilarityDistance (ID# 290)
, IsSimilar(Name, 'David Jorge', 291) as a291 -- iLongestCommonSubstringDistance (ID# 291)
, IsSimilar(Name, 'David Jorge', 292) as a292 -- iLongestCommonSubsequenceDistance (ID# 292)
, IsSimilar(Name, 'David Jorge', 293) as a293 -- iSmithWaterman (ID# 293)
, IsSimilar(Name, 'David Jorge', 294) as a294 -- iSmithWatermanGotoh (ID# 294)
, IsSimilar(Name, 'David Jorge', 295) as a295 -- iSmithWatermanGotohWindowedAffine (ID# 295)
, IsSimilar(Name, 'David Jorge', 320) as a320 -- iCosineSimilarity (ID# 320)
, IsSimilar(Name, 'David Jorge', 321) as a321 -- iJaccardSimilarity (ID# 321)
, IsSimilar(Name, 'David Jorge', 322) as a322 -- iJaccardIndex (ID# 322)
, IsSimilar(Name, 'David Jorge', 323) as a323 -- iTanimotoCoefficientDistance (ID# 323)
, IsSimilar(Name, 'David Jorge', 324) as a324 -- iOverlapCoefficient (ID# 324)
, IsSimilar(Name, 'David Jorge', 325) as a325 -- iSorensenDiceDistance (ID# 325)
, IsSimilar(Name, 'David Jorge', 326) as a326 -- iDiceSimilarity (ID# 326)
, IsSimilar(Name, 'David Jorge', 327) as a327 -- iBlockDistance (ID# 327)
, IsSimilar(Name, 'David Jorge', 328) as a328 -- iMatchingCoefficient (ID# 328)
, IsSimilar(Name, 'David Jorge', 329) as a329 -- iQGramsDistance (ID# 329)
, IsSimilar(Name, 'David Jorge', 330) as a330 -- iNGramsDistance (ID# 330)
, IsSimilar(Name, 'David Jorge', 331) as a331 -- iTverskyIndex_DO_NOT_USE (ID# 331)
, IsSimilar(Name, 'David Jorge', 332) as a332 -- iMongeElkan (ID# 332)
, IsSimilar(Name, 'David Jorge', 333) as a333 -- iSift4 (ID# 333)
, IsSimilar(Name, 'David Jorge', 334) as a334 -- iGeneralizedCompressionDistance_DO_NOT_USE (ID# 334)
, IsSimilar(Name, 'David Jorge', 335) as a335 -- iSimHash_DO_NOT_USE (ID# 335)
, IsSimilar(Name, 'David Jorge', 336) as a336 -- iMinHash_DO_NOT_USE (ID# 336)
, IsSimilar(Name, 'David Jorge', 480) as a480 -- iChapmanMeanLength (ID# 480)
, IsSimilar(Name, 'David Jorge', 16385) as a16385 -- SoundexPhonix (ID# 16385)
, IsSimilar(Name, 'David Jorge', 16386) as a16386 -- CaverPhonePhonix (ID# 16386)
, IsSimilar(Name, 'David Jorge', 16387) as a16387 -- MatchRatingApproach (ID# 16387)
, IsSimilar(Name, 'David Jorge', 16388) as a16388 -- Metaphone (ID# 16388)
, IsSimilar(Name, 'David Jorge', 16389) as a16389 -- DoubleMetaphone (ID# 16389)
, IsSimilar(Name, 'David Jorge', 16390) as a16390 -- ColognePhonetics (ID# 16390)
, IsSimilar(Name, 'David Jorge', 16391) as a16391 -- SoundexVer2 (ID# 16391)
, IsSimilar(Name, 'David Jorge', 16448) as a16448 -- EnPhoneticDistance (ID# 16448)
FROM SimilarNames;
-- Note: Case insensitive functions have an ID number greater than 256
--       C++ functions have an ID number equal to or greater than  128 and less than 224
--       Tokenize functions have an ID number equal to or greater than  64 and less than 96
--       Phrase functions have an ID number equal to or greater than  96 and less than 128
--       Functions that are being considered for deletion have an ID number equal to or greater than  234 and less than 256
