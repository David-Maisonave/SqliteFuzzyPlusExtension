select Words
, Distance(Words, 'David', 0) as a0 -- UseDefaultStringMatchingAlgorithm (ID# 0)
, Distance(Words, 'David', 1) as a1 -- Levenshtein (ID# 1)
, Distance(Words, 'David', 2) as a2 -- DamerauLevenshtein (ID# 2)
, Distance(Words, 'David', 3) as a3 -- JaroWinkler (ID# 3)
, Distance(Words, 'David', 4) as a4 -- HammingDistance (ID# 4)   *** Note: The Hamming algorithm only works with strings having equal length ***
, Distance(Words, 'David', 5) as a5 -- JaroDistance (ID# 5)
, Distance(Words, 'David', 6) as a6 -- NormalizedLevenshteinDistance (ID# 6)
, Distance(Words, 'David', 7) as a7 -- Levenshtein2Distance (ID# 7)
, Distance(Words, 'David', 8) as a8 -- ChapmanLengthDeviation (ID# 8)
, Distance(Words, 'David', 9) as a9 -- EuclideanDistance (ID# 9)
, Distance(Words, 'David', 32) as a32 -- LongestCommonSequence (ID# 32)
, Distance(Words, 'David', 33) as a33 -- NeedlemanWunsch (ID# 33)
, Distance(Words, 'David', 34) as a34 -- RatcliffObershelpSimilarityDistance (ID# 34)
, Distance(Words, 'David', 35) as a35 -- LongestCommonSubstringDistance (ID# 35)
, Distance(Words, 'David', 36) as a36 -- LongestCommonSubsequenceDistance (ID# 36)
, Distance(Words, 'David', 37) as a37 -- SmithWaterman (ID# 37)
, Distance(Words, 'David', 38) as a38 -- SmithWatermanGotoh (ID# 38)
, Distance(Words, 'David', 39) as a39 -- SmithWatermanGotohWindowedAffine (ID# 39)
, Distance(Words, 'David', 64) as a64 -- CosineSimilarity (ID# 64)
, Distance(Words, 'David', 65) as a65 -- JaccardSimilarity (ID# 65)
, Distance(Words, 'David', 66) as a66 -- JaccardIndex (ID# 66)
, Distance(Words, 'David', 67) as a67 -- TanimotoCoefficientDistance (ID# 67)
, Distance(Words, 'David', 68) as a68 -- OverlapCoefficient (ID# 68)
, Distance(Words, 'David', 69) as a69 -- SorensenDiceDistance (ID# 69)
, Distance(Words, 'David', 70) as a70 -- DiceSimilarity (ID# 70)
, Distance(Words, 'David', 71) as a71 -- BlockDistance (ID# 71)
, Distance(Words, 'David', 72) as a72 -- MatchingCoefficient (ID# 72)
, Distance(Words, 'David', 73) as a73 -- QGramsDistance (ID# 73)
, Distance(Words, 'David', 74) as a74 -- NGramsDistance (ID# 74)
, Distance(Words, 'David', 96) as a96 -- MongeElkan (ID# 96)
, Distance(Words, 'David', 97) as a97 -- Sift4 (ID# 97)
, Distance(Words, 'David', 128) as a128 -- SimHash (ID# 128)
, Distance(Words, 'David', 416) as a416 -- PhraseTokenize (ID# 416)
, Distance(Words, 'David', 417) as a417 -- SimplePhraseTokenize (ID# 417)
, Distance(Words, 'David', 448) as a448 -- Fuzzy_Damlev (ID# 448)
, Distance(Words, 'David', 449) as a449 -- Fuzzy_Hamming (ID# 449)   *** Note: The Hamming algorithm only works with strings having equal length ***
, Distance(Words, 'David', 450) as a450 -- Fuzzy_Jarowin (ID# 450)
, Distance(Words, 'David', 451) as a451 -- Fuzzy_Leven (ID# 451)
, Distance(Words, 'David', 452) as a452 -- Fuzzy_Osadist (ID# 452)
, Distance(Words, 'David', 453) as a453 -- Fuzzy_Editdist (ID# 453)
, Distance(Words, 'David', 454) as a454 -- Fuzzy_Jaro (ID# 454)
, Distance(Words, 'David', 455) as a455 -- EdlibDistance (ID# 455)
, Distance(Words, 'David', 480) as a480 -- ChapmanMeanLength (ID# 480)   !!! Warning: The ChapmanMeanLength algorithm does not work. It does NOT produce expected results!!!
, Distance(Words, 'David', 496) as a496 -- EditDistance (ID# 496)
, Distance(Words, 'David', 511) as a511 -- ExactMatch (ID# 511)
, Distance(Words, 'David', 513) as a513 -- iLevenshtein (ID# 513)
, Distance(Words, 'David', 514) as a514 -- iDamerauLevenshtein (ID# 514)
, Distance(Words, 'David', 515) as a515 -- iJaroWinkler (ID# 515)
, Distance(Words, 'David', 516) as a516 -- iHammingDistance (ID# 516)   *** Note: The Hamming algorithm only works with strings having equal length ***
, Distance(Words, 'David', 517) as a517 -- iJaroDistance (ID# 517)
, Distance(Words, 'David', 518) as a518 -- iNormalizedLevenshteinDistance (ID# 518)
, Distance(Words, 'David', 519) as a519 -- iLevenshtein2Distance (ID# 519)
, Distance(Words, 'David', 520) as a520 -- iChapmanLengthDeviation (ID# 520)
, Distance(Words, 'David', 521) as a521 -- iEuclideanDistance (ID# 521)
, Distance(Words, 'David', 544) as a544 -- iLongestCommonSequence (ID# 544)
, Distance(Words, 'David', 545) as a545 -- iNeedlemanWunsch (ID# 545)
, Distance(Words, 'David', 546) as a546 -- iRatcliffObershelpSimilarityDistance (ID# 546)
, Distance(Words, 'David', 547) as a547 -- iLongestCommonSubstringDistance (ID# 547)
, Distance(Words, 'David', 548) as a548 -- iLongestCommonSubsequenceDistance (ID# 548)
, Distance(Words, 'David', 549) as a549 -- iSmithWaterman (ID# 549)
, Distance(Words, 'David', 550) as a550 -- iSmithWatermanGotoh (ID# 550)
, Distance(Words, 'David', 551) as a551 -- iSmithWatermanGotohWindowedAffine (ID# 551)
, Distance(Words, 'David', 576) as a576 -- iCosineSimilarity (ID# 576)
, Distance(Words, 'David', 577) as a577 -- iJaccardSimilarity (ID# 577)
, Distance(Words, 'David', 578) as a578 -- iJaccardIndex (ID# 578)
, Distance(Words, 'David', 579) as a579 -- iTanimotoCoefficientDistance (ID# 579)
, Distance(Words, 'David', 580) as a580 -- iOverlapCoefficient (ID# 580)
, Distance(Words, 'David', 581) as a581 -- iSorensenDiceDistance (ID# 581)
, Distance(Words, 'David', 582) as a582 -- iDiceSimilarity (ID# 582)
, Distance(Words, 'David', 583) as a583 -- iBlockDistance (ID# 583)
, Distance(Words, 'David', 584) as a584 -- iMatchingCoefficient (ID# 584)
, Distance(Words, 'David', 585) as a585 -- iQGramsDistance (ID# 585)
, Distance(Words, 'David', 586) as a586 -- iNGramsDistance (ID# 586)
, Distance(Words, 'David', 608) as a608 -- iMongeElkan (ID# 608)
, Distance(Words, 'David', 609) as a609 -- iSift4 (ID# 609)
, Distance(Words, 'David', 640) as a640 -- iSimHash (ID# 640)
, Distance(Words, 'David', 992) as a992 -- iChapmanMeanLength (ID# 992)   !!! Warning: The ChapmanMeanLength algorithm does not work. It does NOT produce expected results!!!
FROM SimilarWords;
-- Note: Case insensitive functions have an ID number greater than 512
--       C++ functions have an ID number equal to or greater than  448 and less than 480
--       Tokenize functions have an ID number equal to or greater than  64 and less than 416
--       Phrase functions have an ID number equal to or greater than  416 and less than 448
--       Functions that are being considered for deletion have an ID number equal to or greater than  496 and less than 512
