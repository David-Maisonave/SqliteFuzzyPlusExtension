select Name
, HowSimilar(Name, "David Jorge", 0) as a0   -- 	UseDefaultDistanceMethod = 0,
, HowSimilar(Name, "David Jorge", 1) as a1   -- 	Levenshtein,
, HowSimilar(Name, "David Jorge", 2) as a2   -- 	DamerauLevenshtein,
, HowSimilar(Name, "David Jorge", 3) as a3   -- 	JaroWinkler,
, HowSimilar(Name, "David Jorge", 4) as a4   -- 	LongestCommonSequence,
, HowSimilar(Name, "David Jorge", 5) as a5   -- 	JaccardIndex,
, HowSimilar(Name, "David Jorge", 6) as a6   -- 	OverlapCoefficient,
, HowSimilar(Name, "David Jorge", 7) as a7   -- 	NeedlemanWunsch,
, HowSimilar(Name, "David Jorge", 8) as a8   -- 	SorensenDiceDistance,
, HowSimilar(Name, "David Jorge", 9) as a9   -- 	RatcliffObershelpSimilarityDistance,
, HowSimilar(Name, "David Jorge", 10) as a10 --	HammingDistance,
, HowSimilar(Name, "David Jorge", 11) as a11 --	LongestCommonSubstringDistance,
, HowSimilar(Name, "David Jorge", 12) as a12 --	LongestCommonSubsequenceDistance,
, HowSimilar(Name, "David Jorge", 13) as a13 --	JaroDistance,
, HowSimilar(Name, "David Jorge", 14) as a14 --	NormalizedLevenshteinDistance,
, HowSimilar(Name, "David Jorge", 15) as a15 --	Levenshtein2Distance,
, HowSimilar(Name, "David Jorge", 16) as a16 --	TanimotoCoefficientDistance,
, HowSimilar(Name, "David Jorge", 17) as a17 --	EditDistance,
-- Token methods					    
, HowSimilar(Name, "David Jorge", 18) as a18 -- CosineSimilarity,
, HowSimilar(Name, "David Jorge", 19) as a19 -- JaccardSimilarity,
-- Phrase token methods which are all case insensitive only
, HowSimilar(Name, "David Jorge", 20) as a20 -- PhraseTokenize,
, HowSimilar(Name, "David Jorge", 21) as a21 -- SimplePhraseTokenize,
-- Sqlean Fuzzy functions			    
, HowSimilar(Name, "David Jorge", 64) as a32 -- Fuzzy_Damlev = SQLEAN_FUZZY,
, HowSimilar(Name, "David Jorge", 65) as a33 -- Fuzzy_Hamming,
, HowSimilar(Name, "David Jorge", 66) as a34 -- Fuzzy_Jarowin,
, HowSimilar(Name, "David Jorge", 67) as a35 -- Fuzzy_Leven,
, HowSimilar(Name, "David Jorge", 68) as a36 -- Fuzzy_Osadist,
, HowSimilar(Name, "David Jorge", 69) as a37 -- Fuzzy_Editdist,
, HowSimilar(Name, "David Jorge", 70) as a38 -- Fuzzy_Jaro,
-- Case INSENSITIVE versions
, HowSimilar(Name, "David Jorge", 129) as a129 -- iLevenshtein = CASE_INSENSITIVE + Levenshtein,
, HowSimilar(Name, "David Jorge", 130) as a130 -- iDamerauLevenshtein,
, HowSimilar(Name, "David Jorge", 131) as a131 -- iJaroWinkler,
, HowSimilar(Name, "David Jorge", 132) as a132 -- iLongestCommonSequence,
, HowSimilar(Name, "David Jorge", 133) as a133 -- iJaccardIndex,
, HowSimilar(Name, "David Jorge", 134) as a134 -- iOverlapCoefficient,
, HowSimilar(Name, "David Jorge", 135) as a135 -- iNeedlemanWunsch,
, HowSimilar(Name, "David Jorge", 136) as a136 -- iSorensenDiceDistance,
, HowSimilar(Name, "David Jorge", 137) as a137 -- iRatcliffObershelpSimilarityDistance,
, HowSimilar(Name, "David Jorge", 138) as a138 -- iHammingDistance,
, HowSimilar(Name, "David Jorge", 139) as a139 -- iLongestCommonSubstringDistance,
, HowSimilar(Name, "David Jorge", 140) as a140 -- iLongestCommonSubsequenceDistance,
, HowSimilar(Name, "David Jorge", 141) as a141 -- iJaroDistance,
, HowSimilar(Name, "David Jorge", 142) as a142 -- iNormalizedLevenshteinDistance,
, HowSimilar(Name, "David Jorge", 143) as a143 -- iLevenshtein2Distance,
, HowSimilar(Name, "David Jorge", 144) as a144 -- iTanimotoCoefficientDistance,
, HowSimilar(Name, "David Jorge", 145) as a145 -- iEditDistance,
-- Token methods						  -- 
, HowSimilar(Name, "David Jorge", 146) as a146 --  iCosineSimilarity,
, HowSimilar(Name, "David Jorge", 147) as a147 --  iJaccardSimilarity,
FROM SimilarNames